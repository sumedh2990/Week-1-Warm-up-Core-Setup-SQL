/* ✅ 1. Using GROUP BY + HAVING (Most Common Way) */
SELECT email, COUNT(*) AS total
FROM Users
GROUP BY email
HAVING COUNT(*) > 1;

/* ✅ 2. Get Full Records of Duplicate Emails (Using Subquery) */
SELECT *
FROM Users
WHERE email IN (
    SELECT email
    FROM Users
    GROUP BY email
    HAVING COUNT(*) > 1
);

/* ✅ 3. Using CTE (Common Table Expression) for Readability */
WITH DuplicateEmails AS (
    SELECT email
    FROM Users
    GROUP BY email
    HAVING COUNT(*) > 1
)
SELECT u.*
FROM Users u
JOIN DuplicateEmails d
ON u.email = d.email;

/* ✅ 4. Using Window Function (Analytic Query) */
SELECT id, name, email,
       COUNT(email) OVER (PARTITION BY email) AS email_count
FROM Users
WHERE COUNT(email) OVER (PARTITION BY email) > 1;

/* ✅ 5. Using Self Join */
SELECT DISTINCT a.email
FROM Users a
JOIN Users b 
ON a.email = b.email 
AND a.id <> b.id;

/* ✅ 6. Using Temporary Table (For Debugging or Testing) */
CREATE TEMPORARY TABLE duplicate_emails AS
SELECT email, COUNT(*) AS cnt
FROM Users
GROUP BY email
HAVING COUNT(*) > 1;

-- View duplicates
SELECT * FROM duplicate_emails;

/* ✅ 7. Using DISTINCT + COUNT Comparison (Check if duplicates exist) */
SELECT COUNT(email) AS total_emails,
       COUNT(DISTINCT email) AS unique_emails,
       COUNT(email) - COUNT(DISTINCT email) AS duplicate_count
FROM Users;
